@using Syncfusion.EJ2.Inputs;

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] EJ2 Document Editor Collaboration</title>
    @*<link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
    <link rel="stylesheet" href="~/css/site.css" />*@

    <!-- Syncfusion Essential JS 2 Styles -->
    <link href="https://cdn.syncfusion.com/ej2/23.2.4/fluent.css" rel="stylesheet" />
    @*<link href="~/material.css" rel="stylesheet" />*@
    <script src="https://cdn.syncfusion.com/ej2/23.2.4/ej2-base/dist/global/ej2-base.min.js" type="text/javascript"></script>
    <script src="https://cdn.syncfusion.com/ej2/23.2.4/ej2-data/dist/global/ej2-data.min.js" type="text/javascript"></script>
    <script src="https://cdn.syncfusion.com/ej2/23.2.4/ej2-svg-base/dist/global/ej2-svg-base.min.js" type="text/javascript"></script>
    <script src="https://cdn.syncfusion.com/ej2/23.2.4/ej2-file-utils/dist/global/ej2-file-utils.min.js" type="text/javascript"></script>
    <script src="https://cdn.syncfusion.com/ej2/23.2.4/ej2-compression/dist/global/ej2-compression.min.js" type="text/javascript"></script>
    <script src="https://cdn.syncfusion.com/ej2/23.2.4/ej2-pdf-export/dist/global/ej2-pdf-export.min.js" type="text/javascript"></script>
    <script src="https://cdn.syncfusion.com/ej2/23.2.4/ej2-buttons/dist/global/ej2-buttons.min.js" type="text/javascript"></script>
    <script src="https://cdn.syncfusion.com/ej2/23.2.4/ej2-popups/dist/global/ej2-popups.min.js" type="text/javascript"></script>
    <script src="https://cdn.syncfusion.com/ej2/23.2.4/ej2-splitbuttons/dist/global/ej2-splitbuttons.min.js" type="text/javascript"></script>
    <script src="https://cdn.syncfusion.com/ej2/23.2.4/ej2-inputs/dist/global/ej2-inputs.min.js" type="text/javascript"></script>
    <script src="https://cdn.syncfusion.com/ej2/23.2.4/ej2-lists/dist/global/ej2-lists.min.js" type="text/javascript"></script>
    <script src="https://cdn.syncfusion.com/ej2/23.2.4/ej2-navigations/dist/global/ej2-navigations.min.js" type="text/javascript"></script>
    <script src="https://cdn.syncfusion.com/ej2/23.2.4/ej2-dropdowns/dist/global/ej2-dropdowns.min.js" type="text/javascript"></script>
    <script src="https://cdn.syncfusion.com/ej2/23.2.4/ej2-calendars/dist/global/ej2-calendars.min.js" type="text/javascript"></script>
    <script src="https://cdn.syncfusion.com/ej2/23.2.4/ej2-charts/dist/global/ej2-charts.min.js" type="text/javascript"></script>
    <script src="https://cdn.syncfusion.com/ej2/23.2.4/ej2-office-chart/dist/global/ej2-office-chart.min.js" type="text/javascript"></script>
    <script src="https://cdn.syncfusion.com/ej2/23.2.4/ej2-excel-export/dist/global/ej2-excel-export.min.js" type="text/javascript"></script>
    <script src="https://cdn.syncfusion.com/ej2/23.2.4/ej2-querybuilder/dist/global/ej2-querybuilder.min.js" type="text/javascript"></script>
    <script src="https://cdn.syncfusion.com/ej2/23.2.4/ej2-grids/dist/global/ej2-grids.min.js" type="text/javascript"></script>
    <script src="https://cdn.syncfusion.com/ej2/23.2.4/ej2-notifications/dist/global/ej2-notifications.min.js" type="text/javascript"></script>

    <style>
        body {
            margin: 0px;
        }
    </style>
</head>
<body>

    <div id="content_area" style="height:500px;margin-top:80px">
        <input type='file' id='fileupload' name='UploadFiles' />
        <div id="document_for_reivew">
            <div id="Grid"></div>
        </div>

        <h1>Shared documents</h1>
        <div>
            <div id="shared_docs"></div>
        </div>
    </div>
    <div id="dialog"></div>
    <div id="share_dialog">
        <input type="text" class="e-input" id="share_id" />
    </div>
    <script id="template" type="text/x-template">
        ${if(ActiveUsers.length > 0)}
            ${if(ActiveUsers[0])}
                <div class="e-avatar e-avatar-xsmall e-avatar-circle image">${  ActiveUsers[0] }</div>
            ${/if}
            ${if(ActiveUsers[1])}
                <div class="e-avatar e-avatar-xsmall e-avatar-circle image">${  ActiveUsers[1] }</div>
            ${/if}
             ${if(ActiveUsers[2])}
                <div class="e-avatar e-avatar-xsmall e-avatar-circle image">${  ActiveUsers[2] }</div>
            ${/if}
             ${if(ActiveUsers[3])}
                <div class="e-avatar e-avatar-xsmall e-avatar-circle image">${  ActiveUsers[3] }</div>
            ${/if}
             ${if(ActiveUsers[4])}
                <div class="e-avatar e-avatar-xsmall e-avatar-circle image">${  ActiveUsers[4] }</div>
            ${/if}
             ${if(ActiveUsers[5])}
                <div class="e-avatar e-avatar-xsmall e-avatar-circle image">${  ActiveUsers[5] }</div>
            ${/if}
             ${if(ActiveUsers[6])}
                <div class="e-avatar e-avatar-xsmall e-avatar-circle image">${  ActiveUsers[6] }</div>
            ${/if}
             ${if(ActiveUsers[7])}
                <div class="e-avatar e-avatar-xsmall e-avatar-circle image">${  ActiveUsers[7] }</div>
            ${/if}
             ${if(ActiveUsers[8])}
                <div class="e-avatar e-avatar-xsmall e-avatar-circle image">${  ActiveUsers[8] }</div>
            ${/if}
              ${if(ActiveUsers[9])}
                <div class="e-avatar e-avatar-xsmall e-avatar-circle image">${  ActiveUsers[9] }</div>
            ${/if}
        ${/if}
    </script>
    <script>
        var grid;
        var currentUser = "@ViewBag.currentUser";
        var dlgObj;
        var sharedRow;
        var sharedgrid;
        document.addEventListener("DOMContentLoaded", function () {

            var uploadObj = new ej.inputs.Uploader({
                asyncSettings: {
                    saveUrl: "/api/DocumentEditor/UploadFile",
                    removeUrl: "/api/DocumentEditor/RemoveFile",
                },
                removing: onFileRemove,
                success: loadData
            });
            uploadObj.appendTo('#fileupload');


            var gridElement = document.getElementById("Grid");
            grid = new ej.grids.Grid({
                columns: [
                    { field: 'FileIndex', headerText: 'S.No' },
                    { field: 'FileName', headerText: 'File Name' },
                    { field: 'CreatedOn', headerText: 'Created on' },
                    { field: 'SharedWith', headerText: 'Shared With' },
                    {
                        headerText: 'Active users', textAlign: 'Center',
                        template: '#template', width: 150
                    },
                    { headerText: 'Edit', commands: [{ buttonOption: { content: "Edit", iconCss: "edit-icon", cssClass: 'e-primary', click: editDocument } }] },
                    // { headerText: 'Delete', commands: [{ buttonOption: { iconCss: "share-icon", content: 'Delete', cssClass: 'e-primary', click: deleteDocument } }] },
                    { headerText: 'Share', commands: [{ buttonOption: { iconCss: "share-icon", content: 'Share', cssClass: 'e-primary', click: shareDocument } }] }
                ],
                allowPaging: true
            });
            grid.appendTo(gridElement);
            loadData();


            var sharedGridElement = document.getElementById("shared_docs");
            sharedgrid = new ej.grids.Grid({
                columns: [
                    { field: 'FileIndex', headerText: 'S.No' },
                    { field: 'FileName', headerText: 'File Name' },
                    { field: 'SharedBy', headerText: 'Shared By' },
                    {
                        headerText: 'Active users', textAlign: 'Center',
                        template: '#template', width: 150
                    },
                    { headerText: 'Edit', commands: [{ buttonOption: { content: "Edit", iconCss: "edit-icon", cssClass: 'e-primary', click: editSharedDocument } }] }
                ],
                allowPaging: true
            });
            sharedgrid.appendTo(sharedGridElement);
            loadSharedData();

            dlgObj = new ej.popups.Dialog({
                header: 'Share document',
                content: document.getElementById("share_dialog"),
                target: document.getElementById('content_area'),
                showCloseIcon: true,
                visible: false,
                isModel: true,
                buttons: [
                    {
                        click: dlgButtonClick,
                        buttonModel: { content: 'Ok', isPrimary: true }
                    },
                    {
                        click: dlgCancelButtonClick,
                        buttonModel: { content: 'Cancel' }
                    }
                ],
                width: '200px',
                open: dialogOpenClose,
                close: dialogOpenClose,
                animationSettings: { effect: 'none' }
            });
            dlgObj.appendTo('#dialog');

        });

        function dlgButtonClick(args) {
            let newSharedWith = document.getElementById("share_id").value;

            if (sharedRow.SharedWith != "" && sharedRow.SharedWith != null) {
                newSharedWith = ';' + newSharedWith;
            }

            newSharedWith = sharedRow.SharedWith + newSharedWith;

            var httpRequest = new XMLHttpRequest();
            httpRequest.open('POST', '/api/DocumentEditor/ShareDocument', true);
            httpRequest.setRequestHeader("Content-Type", "application/json;charset=UTF-8");
            httpRequest.onreadystatechange = function () {
                if (httpRequest.readyState === 4) {
                    if (httpRequest.status === 200 || httpRequest.status === 304) {
                        grid.dataSource = JSON.parse(httpRequest.responseText);
                    }
                }
            };
            httpRequest.send(JSON.stringify({ "DocumentId": sharedRow.DocumentID, SharedWith: newSharedWith, "DocumentName": sharedRow.FileName }));
            dlgObj.hide()
            //args.postRawFile = false;
        }

        function dlgCancelButtonClick(args) {
            dlgObj.hide()
        }

        function dialogOpenClose(args) {
            document.getElementById("share_id").value = "";
        }

        function onFileRemove(args) {
            args.postRawFile = false;
        }

        function editSharedDocument(args) {
            var rowObj = sharedgrid.getRowObjectFromUID(ej.base.closest(args.target, '.e-row').getAttribute('data-uid'));
            var data = rowObj.data;
            var url = '@Url.Action("Open", "Home")' + '/' + data.Owner + '/' + data.DocumentID;
            window.location.href = url;
        }

        function editDocument(args) {
            var rowObj = grid.getRowObjectFromUID(ej.base.closest(args.target, '.e-row').getAttribute('data-uid'));
            var data = rowObj.data;
            var url = '@Url.Action("Open", "Home")' + '/' + data.Owner + '/' + data.DocumentID;
            window.location.href = url;
        }

        function shareDocument(args) {
            var rowObj = grid.getRowObjectFromUID(ej.base.closest(args.target, '.e-row').getAttribute('data-uid'));
            sharedRow = rowObj.data;
            dlgObj.show();
        }



        function deleteDocument(args) {
            var rowObj = grid.getRowObjectFromUID(ej.base.closest(args.target, '.e-row').getAttribute('data-uid'));
            var data = rowObj.data;
            var httpRequest = new XMLHttpRequest();
            httpRequest.open('POST', '/api/DocumentEditor/DeleteFile', true);
            httpRequest.setRequestHeader("Content-Type", "application/json;charset=UTF-8");
            httpRequest.onreadystatechange = function () {
                if (httpRequest.readyState === 4) {
                    if (httpRequest.status === 200 || httpRequest.status === 304) {
                        grid.dataSource = JSON.parse(httpRequest.responseText);
                    }
                }
            };
            httpRequest.send(JSON.stringify({ "DocumentName": data.FileName, "DocumentId": sharedRow.DocumentID }));
           // loadData();
        }
        function loadData() {
            var httpRequest = new XMLHttpRequest();
            httpRequest.open('Get', '/api/DocumentEditor/GetDataSource', true);
            httpRequest.setRequestHeader("Content-Type", "application/json;charset=UTF-8");
            httpRequest.onreadystatechange = function () {
                if (httpRequest.readyState === 4) {
                    if (httpRequest.status === 200 || httpRequest.status === 304) {
                        grid.dataSource = JSON.parse(httpRequest.responseText);
                    }
                }
            };
            httpRequest.send();
        }

        function loadSharedData() {
            var httpRequest = new XMLHttpRequest();
            httpRequest.open('Get', '/api/DocumentEditor/GetDataSource', true);
            httpRequest.setRequestHeader("Content-Type", "application/json;charset=UTF-8");
            httpRequest.onreadystatechange = function () {
                if (httpRequest.readyState === 4) {
                    if (httpRequest.status === 200 || httpRequest.status === 304) {
                        grid.dataSource = JSON.parse(httpRequest.responseText);
                    }
                }
            };
            httpRequest.send();
        }
        function loadSharedData() {
            var httpRequest = new XMLHttpRequest();
            httpRequest.open('Get', '/api/DocumentEditor/GetSharedDataSource', true);
            httpRequest.setRequestHeader("Content-Type", "application/json;charset=UTF-8");
            httpRequest.onreadystatechange = function () {
                if (httpRequest.readyState === 4) {
                    if (httpRequest.status === 200 || httpRequest.status === 304) {
                        sharedgrid.dataSource = JSON.parse(httpRequest.responseText);
                    }
                }
            };
            httpRequest.send();
        }

    </script>

    <style>

        .edit-icon::before {
            content: '\e81e';
            font-family: e-icons;
        }

        .share-icon::before {
            content: '\e94a';
            font-family: e-icons;
        }
    </style>
</body>
</html>



